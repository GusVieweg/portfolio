# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-19 16:35
from __future__ import unicode_literals
from django.db import migrations
from datetime import datetime


def import_projects(apps, schema_editor):
    """
    Load up initial applications
    :param apps:
    :param schema_editor:
    :return:
    """
    Project = apps.get_model("projects", "Project")
    data = [
        ("Sage", "sage.png", datetime(2015, 11, 26)),
        ("Gitit-Notes", "gitit-notes.png", datetime(2015, 5, 29)),
        ("Mini-Java", "mini-java.png", datetime(2014, 2, 15)),
        ("Pong", "pong.png", datetime(2015, 10, 1)),
        ("Project Euler", "project-euler.png", datetime(2015, 4, 1)),
    ]
    descriptions = [
        """
        A C++ PEG packrat parser written experimentally for a more thorough understanding of topdown parsing. This includes a library of regular expressions and scanning utilities.
        """,
        """
        Consists of various notes and resources I've collected regarding a variety of different mathematical concepts (e.g. Abstract Algebra, Differential Equations, Linear Algebra, etc.). It is written underneath using custom Haskell plugins and the gitit library, which in turn runs on Happstack.
        """,
        """
        A custom compiler, written in Java, for a subset of the Java language. The compiled code is written for a custom machine called mJAM (which itself is compiled to Java bytecode).
        """,
        """
        A custom version of the classic arcade game Pong in System Verilog and built onto the Artix FPGA. This works via a custom ALU intended to process an arbitrary MIPS program with a modified memory configuration allowing direct memory access between the board, the keyboard, and a monitor via the VGA specification.
        """,
        """
        A solution set, written in Haskell, for problems on the site Project Euler. In the process of solving problems, I maintain a core set of functionality in the "Euler" module.
        """,
    ]
    for i in range(len(data)):
        Project(title=data[i][0], img_src=data[i][1], description=descriptions[i], date=data[i][2]).save()

    sage = Project.objects.get(title="Sage")
    sage.git = "https://github.com/jrpotter/sage"
    sage.save()

    gitit = Project.objects.get(title="Gitit-Notes")
    gitit.git = "https://github.com/jrpotter/gitit-notes"
    gitit.save()

    mini = Project.objects.get(title="Mini-Java")
    mini.git = "https://github.com/jrpotter/mini-java"
    mini.save()

    pong = Project.objects.get(title="Pong")
    pong.git = "https://github.com/jrpotter/pong"
    pong.save()

    euler = Project.objects.get(title="Project Euler")
    euler.git = "https://github.com/jrpotter/project-euler"
    euler.save()


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0004_auto_20151219_1624'),
    ]

    operations = [
        migrations.RunPython(import_projects),
    ]
